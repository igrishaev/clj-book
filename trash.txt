
\noindent
\begin{tabular}{ @{}p{5.2cm} @{}p{5.2cm} }

\begin{english}
  \begin{clojure/lines}
;; bad
(deftest test-page-index
  (let [resp (page-index {...})
        {:keys [status]} resp]
    (is (= 200 status))))
  \end{clojure/lines}
\end{english}

&

\begin{english}
  \begin{clojure}
;; good
(deftest test-page-index
  (let [resp (entire-app {...})
        {:keys [status]} resp]
    (is (= 200 status))))
  \end{clojure}
\end{english}

\end{tabular}


Underfull \hbox (badness 1496) in paragraph at lines 444--448
Underfull \hbox (badness 1102) in paragraph at lines 864--867
Overfull \hbox (3.72946pt too wide) in paragraph at lines 1247--1249
Underfull \hbox (badness 1348) in paragraph at lines 1408--1411
Underfull \hbox (badness 1173) in paragraph at lines 1519--1521

`\(.+?\)`
\\hl{\1}

`\(.+?\)`
\\hl{\1}

\\hl{\(.+?\)}
\\spverb|\1|

^## \(.+?\)$
\\section{\1}

^### \(.+?\)$
\\subsection{\1}

`\(.+?\)`
\\spverb|\1|

^~~~.+?$
\\begin{verbatim}

^~~~$
\\end{verbatim}

\*\*\(.+?\)\*\*
\\emph{\1}

 --
~---

 —
~---

quotes
ident

\rule{\textwidth}{.5pt}


елечки
spec -- summary
spec -- s/tuple
spec -- угловые кавычки


web more chapter tags


{code}
{verbatim}

TODO
less Рассмотрим

\subsection{Ключ :fn}

Функциональная спека принимает ключ \spverb|:fn|. Это спека для третей стадии
проверки. В нее одновременно попадают аргументы и результат. Иногда результат
зависит от параметров по особым правилам. Например, если функция находит число
из диапазона, проверка на \spverb|int?| недостаточна. Нужно убедиться, что число
действительно не выходит за границы аргументов.

Спека \spverb|:fn| получает словарь с ключами \spverb|:args| и \spverb|:ret|. В
\spverb|:args| находятся аргументы, которые вернула спека с ключом
\spverb|:args|. В \spverb|:ret|~--- результат функции. Спека должна их сравнить
и вернуть истину или ложь.

Для функции \spverb|date-range-sec| действует правило: если первая дата больше
второй, то результат отрицательный. Напишите спеку \spverb|:fn|, которая
проверяет это условие. Тем самым вы предотвратите случай, когда кто-то решит,
что результат должен быть по модулю.

\begin{verbatim}
(s/fdef date-range-sec
  :args (s/cat :start inst? :end inst?)
  :ret int?
)
\end{verbatim}

https://clojure.org/guides/spec#_specing_functions

table of code (3 columns)
1st chapter headings

(defn install-better-logging []
  (alter-var-root
   (var clojure.tools.logging/log*)
   (fn [log*] ;; origin log function
     (fn [logger level throwable message]
       (if throwable
         (log* logger level nil
               (str message \newline
                    (with-out-str
                      (ex-print throwable))))
         (log* logger level throwable message))))))

Reflection warning,  - reference to field toString can't be resolved.

\begin{figure}[!ht]

\begin{verbatim}
version: '2'
services:
  postgres:
    image: postgres
    environment:
      POSTGRES_DB: project_db
      POSTGRES_USER: project_user
      POSTGRES_PASSWORD: project_secret
\end{verbatim}

%% С точки зрения системы образ это черный ящик. Технически возможно подключиться к
%% запущенному образу (он называется контейнер). Но во-первых, изменения контейнере
%% не сохраняются в образ и живут в памяти до завершения работы. Во-вторых,
%% подключаться к пяти экземплярам приложения и менять что-то вручную утомительно и
%% непродуктивно. Остается только собрать образ с новым конфигурационным файлом на
%% борту, загружать его в хранилище и перезапускать сервис, что в целом долго.

%% Облачные платформы достаточно развиты, чтобы избежать таких сценариев. В панели
%% администратора для каждого сервиса есть форма с переменными среды, которые
%% процесс получит при старте. Если приложение читает конфигурацию из среды,
%% достаточно поменять значение прямо в форме и перезагрузить сервис.

%% Чтобы проверить регистрацию, понадобится запущенная система: веб-сервер,
%% почтовый сервер, база данных. Интеграционный тест подключается к браузеру по
%% протоколу WebDriver\footurl{https://www.w3.org/TR/webdriver/} и командует
%% им. Открывает страницу регистрации, вводит данные и нажимает кнопку. Проверяет,
%% что появился текст с просьбой проверить почту. По протоколу SMTP скачивает
%% последнее письмо. Ищет ссылку активации регулярным выражением. Открывает ссылку
%% в новой вкладке. Переходит на страницу авторизации и вводит почту и
%% пароль. Убеждается, что попал в личный кабинет.


(defn wrap-headers-kw
[handler]
(fn [req]
(-> req
(update :headers keywordize-keys)
handler
(update :headers stringify-keys)))) ;; <-


https://grishaev.me/clj-book-web-1/#comment-4519528307

table for code
syntax highlight
use minted


\begin{verbatim}
Fail in test-square-roots
One root ;; message from the testing macro
expected: nil
  actual: -3
\end{verbatim}


:once 1 starts
 :once 2 starts
  :each 3 starts   +
   :each 4 starts  | test1
   :each 4 ends    |
  :each 3 ends     +
  :each 3 starts   +
   :each 4 starts  | test2
   :each 4 ends    |
  :each 3 ends     +
  :each 3 starts   +
   :each 4 starts  | test3
   :each 4 ends    |
  :each 3 ends     +
  :each 3 starts   +
   :each 4 starts  | test4
   :each 4 ends    |
  :each 3 ends     +
 :once 2 ends
:once 1 ends


%% \usepackage{qrcode}

%% \marginpar{\qrcode[height=1cm]{https://test}}

%% \begin{wrapfigure}{r}{0.5\textwidth}
%%     \qrcode[height=1cm]{https://github.com/exoscale/obwald}
%% \end{wrapfigure}

Это справедливо: без \spverb|is| тест может подать сигнал об ошибке только
исключением, что ведет к ряду проблем. Исключение и неверный результат это
разные сигналы. Например, функция может давать верный результат, а деление на
ноль происходит только в особых случаях. Если заменить деление на умножение, мы
больше никогда не получим ArithmeticException, но результат будет далек от
истины.


https://tex.stackexchange.com/questions/97384/why-does-the-marginpar-not-appear-on-the-left-page

\newcommand{\footurl}[1]{%
\footnote{\StrSubstitute{#1}{https://}{}}
\marginpar{\qrcode[height=10mm]{#1}}
}


  marginparwidth=10mm,     % + <- Width of your marginpar
  marginparsep=1mm,        % + <- Gap between text block and marginpar


https://www.overleaf.com/learn/latex/Code_Highlighting_with_minted#Reference_guide
https://github.com/lofic/pygments-style-lofic
https://help.farbox.com/pygments.html
https://github.com/gpoore/minted/issues/176
https://quantixed.org/2018/10/23/new-lexicon-how-to-add-a-custom-minted-lexer-in-overleaf/
https://github.com/pygments/pygments/blob/48e55050f8bec34d57a1a86e06e779c6288b8341/pygments/lexers/jvm.py
https://pbelmans.ncag.info/blog/2011/03/06/how-to-change-pygments-styles-and-a-university-of-antwerp-style/
https://github.com/pygments/pygments/blob/master/pygments/styles/bw.py
https://github.com/pbelmans/ua-pygments-style

https://tex.stackexchange.com/questions/444122/pass-parameter-1-to-minteds-mintinline-when-1-begins-with
https://tex.stackexchange.com/questions/394072/own-command-for-mintinline-cannot-handle-hash-character

http://dkhramov.dp.ua/Comp.CyrillicInListingsTex

\newenvironment{code}[1]{\VerbatimEnvironment\begin{otherlanguage}{english}\begin{minted}{#1}}{\end{minted}\end{otherlanguage}}

\usepackage{minted}
\usemintedstyle{bw}


\noindent
\begin{tabular}{ @{}p{5cm} @{}p{5cm} }

\begin{verbatim}
\end{verbatim}

&

\begin{verbatim}
\end{verbatim}

\end{tabular}


\spverb|integrant| Integrant
\spverb|Integrant| Integrant
\spverb|component| Component
\spverb|Component| Component
\spverb|mount| Mount
\spverb|Mount| Mount


:headers

\begin{verbatim} \begin{code}{clojure}
\end{verbatim} \end{code}


{:content-type "text/plain"} {"content-type" "text/plain"}

%% \begin{minted}[linenos,breaklines]{text}

https://stackoverflow.com/questions/6886024/how-to-replace-a-search-with-multiple-lines-in-emacs

%% a5paper
%% \usepackage{lmodern}

\begin{verbatim}

\begin{english}
  \begin{clojure}

\end{verbatim}

  \end{clojure}
\end{english}

%% Это
%% значит, что если метод start вернул не компонент, а словарь, мы не сможем
%% вызвать правильный stop для этого словаря.

Система не должна быть запущена частично. Такое может случится, если один из
компонентов бросил исключение на середине обхода. Это досадная ситуация, потому
что есть риск застрять в пограничном состоянии. Если включить систему во второй
раз, получим конфликты портов или компоненты-дубли.

Будет правильно, если дойдя до проблемного компонента, загрузчик системы не
бросит исключение, а поместит его в переменную. Затем пойдет в обратном порядке
и выключит все, что успел включить. И только потом бросит исключение, которое
поймал.


(defn ->conformer
  ([f]
   (->conformer f nil))
  ([f unf]
   (s/conformer
    (fn [x]
      (try
        (f x)
        (catch Throwable e
          ::s/invalid)))
    (or unf identity))))


(defmacro with-conformer
  [[bind] & body]
  `(->conformer
    (fn [~bind] ~@body)))

Классы одного фреймворка не работаю с другим и наоборот. Рассмотрим язык Python
и фреймворки Django и Flask. Оба следуют схеме, что мы описали. Запрос в Django
представлен классом \spverb|django.http.HttpRequest|, а во Flask~---
\spverb|flask.Request|. Одного взгляда достаточно, чтобы увидеть, насколько они
отличаются. У классов разные методы и поля. То, что есть в первом классе,
отсутствует во втором. Использовать \spverb|flask.Request| в проекте на Django
невозможно.

Результат каждого шага проверяют по разным критериям. Когда из
\spverb|Content-Length| получают число, учитывают ошибку в разборе
строки. Результат \spverb|-42| неверный, потому что число байт не может быть
отрицательным.

В Clojure пространства нужны, чтобы разделить одноим\"{е}нные поля у разных
сущностей, например \spverb|:user/name| и \spverb|:project/name|.

%% TODO s/unform jdbc
%% Для подключения к базе данных укажем готовую спеку из JDBC:
%% \begin{english}
%%   \begin{clojure}
%% (require '[clojure.java.jdbc.spec :as jdbc])
%% (s/def ::db ::jdbc/db-spec)
%%   \end{clojure}
%% \end{english}

%% \widowpenalty=10000
%% \clubpenalty=10000
%% \tolerance=500
%% \hyphenpenalty=500

%% \sloppy
%% \everypar{\looseness=-1}

\begin{english}
  \begin{clojure}
(let [ns-symbols (->> config
                      keys
                      (map namespace)
                      (map symbol))]
  (doseq [ns-symbol ns-symbols]
    (require ns-symbol)))
  \end{clojure}
\end{english}


\noindent
\begin{tabular}{ @{}p{5.0cm} @{}p{5.0cm} }

\begin{english}
  \begin{clojure}
;; why this?
(assoc this :server nil)


  \end{clojure}
\end{english}

&

\begin{english}
  \begin{clojure}
;; but not this?
(dissoc this :server)
  \end{clojure}
\end{english}

\end{tabular}

\vspace{-2em}

this (assoc this :flag flag)   ;; (1)
\ding{192}

(binding [*exit* nil] (set! *exit* 100) *exit*)

(-> #'rand-uuid meta :ns ns-name str (clojure.string/starts-with? "partner-api."))
-------------

# .PHONY: full
# full:
# 	egrep -A 1 -B 1 -i 'overfull|underfull' main.log


Оператор \verb|@| мы обсудим в
следующей главе на примере атома \page{deref-intro}.

-------------

Package microtype Warning: You are using the `ragged2e' package.
(microtype)                Adjustment of interword spacing may lead to
(microtype)                undesired results when used with `ragged2e'.
(microtype)                In this case, disable the `spacing' option.

\textquotesingle  \textasciigrave


     :headers {"content-type" "text/plain"}

%% (require '[clojure.string :as str])


+А так~--- напечатать построчно (получим столбик тех же строк):

+\begin{figure}[ht!]
+  \small

-;; Get user info error
-;; Auth error
-;; HTTP error

+Clojure, и это сбивает с толку. Шумные трейсы~--- справедливый упрёк в адрес

+\begin{center}
+  \uwave{\hspace{5cm}}
+\end{center}

-----------------
  \begin{minted}[linenos, firstnumber=7]{clojure}
  \end{minted}

-----------------

-----------------

\begin{listing}[ht!]
  \small

\caption{}
\label{fig:}

\end{listing}

-----------------

\begin{figure}[h!]
  \small

\chart{}

\caption{}
\label{fig:}

\end{figure}

------------------

\noindent
\begin{tabular}{ @{}p{5cm} @{}p{5cm} }

\begin{english}
  \begin{clojure}
  \end{clojure}
\end{english}

&

\begin{english}
  \begin{clojure}
  \end{clojure}
\end{english}

\end{tabular}

------------------


\ifx\MODE\PRINT
\fi

\ifx\MODE\web
\fi


\hypersetup{
    colorlinks=true,
    linkcolor=blue,
    filecolor=blue,
    urlcolor=blue,
}

%% \newcommand{\tuple}[1]{$\langle$#1$\rangle$}

\setminted{numbersep=1mm}

xleftmargin=\parindent

%% \begin{listing}[ht!]
%%   \small

%% \caption{Интеграционный тест с Etaoin}
%% \label{fig:etaoin-test}
%% \end{listing}



Книга рассказывает о Clojure современном диалекте Лиспа. Это функциональный язык с акцентом на неизменяемость и многопоточность. Он появился десять лет назад и постепенно набирает популярность в России. В семи главах мы рассмотрим, как работать с Clojure на производстве.

Эта книга не для тех, кто учит язык с нуля. Ожидается, что читатель знаком с Clojure или другим диалектом Лиспа. Чтобы лучше усвоить материал, желательно иметь опыт программирования. Для аудитории продвинутого уровня.


PDF для печати формата А5
PDF для планшета (см. скриншот)

Версии для Kindle и телефона в процессе работы, и вы сможете скачать их позже. Форматы ebub и fb2 не планируются, потому что они плохо передают код, а это центральная часть книги.

+\ifx\MODE\PRINT
+\setlength{\cftbeforetoctitleskip}{40pt}
+\setlength{\cftparskip}{1pt}
+\fi


=== DB ===

В руководствах по базам данных обычно приводят следующую таблицу. В столбцах перечислены проблемы, которые ждут вас при попытке одновременно обновить данные. В стоках указаны уровни изоляции. Плюс на их пересечении означает, что данный уровень решает эту проблему. Коротко поясним, что стоит за каждым термином в столбцах.

Фантомное чтение
Неповторяющееся чтение
Грязное чтение
Потерянное обновление


В JDBC на транзакции влияет параметр autocommit. Чтобы не столкнуться со странным поведением, важно понять, как он работает.

Флаг отвечает за то, будет ли запрос на изменение зафиксирован (committed) немедленно или по команде. Если флаг истина (поведение по умолчанию), то после каждого INSERT, UPDATE или DELETE библиотека вставляет команду COMMIT. Когда флаг ложь, запрос не фиксируется после выполнения. Вы должны вызвать метод .commit, чтобы зафиксировать результат.

В Clojure флаг задают в словаре JDBC-спеки ключом :auto-commit? (со знаком вопроса на конце, потому что это логическое поле). Рассмотрим поведение базы с флагом и без него. Для начала объявим подключение с флагом:

(def db {:auto-commit? true
         :dbtype "postgresql"
         ...})

Запишем в базу двух пользователей:

(jdbc/insert! db :users {:fname "Ivan"})
(jdbc/insert! db :users {:fname "Huan"})

В логах базы данных увидим запросы:

BEGIN
INSERT INTO users ( fname ) VALUES ( $1 )
parameters: $1 = 'Ivan'
COMMIT

BEGIN
INSERT INTO users ( fname ) VALUES ( $1 )
parameters: $1 = 'Huan'
COMMIT

Очевидно, каждый из них был выполнен в транзакции.



И без него:

...

Если говорить проще, autocommit оборачивает каждое изменение в транзакцию. Поэтому функции jdbc/insert!, jdbc/update! и другие принимают флаг ..., который делает то же самое по требованию. Например, если autocommit выключен, но вы хотите зафиксировать изменения, передайте флаг в функцию. Небольшой пример:

...

Ручная работа с транзакциями трудоемка. В Java она сводится к вызову методов setAutoCommit и commit соединения. Очевидно, легко забыть один из них в коде, чтобы получит странное поведение. Кроме того, флаг может не вернуться в прежнее состояние из-за исключения (когда забыли форму finally в блоке try/catch).

——————————


Модуль с состоянием

Как мы выяснили, для работы базой нужно хранить JDBC-спеку с пулом соединений. Это значит, должен быть код, чтобы включить и выключить его по требованию. Кроме того, почти все функции jdbc принимаю первым параметром спеку, и порой утомительно передавать ее каждый раз. В этом разделе мы рассмотрим, как упростить работу с базой.

Первую проблему — включение по запросу — проще решить библиотекой Mount. Мы работали с ней в прошлой книге в главе про системы, поэтому просто напомним, как объявить компонент и включить его. Добавьте зависимости:

...

Компонент и его запуск:

Передайте ... в любую функцию запроса, вставки или удаления:
...

Компонент работает в том числе и с транзакциями:

...

Теперь объявим в модуле функцию query. Она действует как jdbc/query, но подставляет на место спеки компонент ... С новой функцией код станет короче:

...

Функцию можно задать двумя способами: подробно и кратко через partial. Подробный вариант — это обычная функция:

...

Краткий вариант с partial. Обратите внимание, что первым аргументом мы передаем ссылку на компонент, а не его значение. Если бы это было значение, мы бы всегда вызывали jdbc/query с неработающим компонентом. Ссылка гарантирует, что после запуска получим рабочий компонент.

Еще одно замечание к partial в том, что редактор больше не сможет подсказать документацию и сигнатуру оригинальной функции. Скажем, если подвести курсор редактора к функци jdbc/query, в строке подсказки увидим:

...

Для функций, полученных с помощью partial, мы не получим эту информацию.

По аналогии создайте функции update!, insert! и другие с компонентом на первом месте. Практика показывает, что не придется писать их много — как правило, хватает меньше десяти.

Выше мы упоминали, что транзакциях важно соблюдать правило: в рамках макроса ... все функции jdbc принимаю первым аргументом транзакционное соединение. Чтобы свести ошибку к нулю, сделаем компонент динамической переменной. Добавим макрос, который, в дополнение к ..., заменит компонент на транзакционное соединение. Это значит, вызов любой из наших функций query, update и других сработает в транзакции.

...

Убедимся в этом. Выполним два запроса и проверим лог базы:

...

Обратите внимание, что и кода стало меньше. Исчезли переменные, которые нужно куда-то передавать вручную, что снижает риск ошибки.

Читатель может возразить: наш модуль завязан строго на одну базу. Что если придется выполнить запрос к другой? Иногда это встречается в проектах: основная работа ложится первую базу, а из второй, скажем, архивной, вы читаете старые данные. Добавим макрос with-db, который временно свяжет компонент с произвольной спекой. Внутри макроса наши функции обратятся другому хранилищу.

...

В примере ниже мы читаем ... из первой базы, а .. из второй:

...

Макрос with-db работает с транзакцией. Вот как выполнить два запроса на изменение второй базы:

...

Модуль с состоянием и несколькими макросами и функциями на займет много места. Он позволит кратко описать логику, сэкономит код и снизит риск ошибки.

———-

Возможны два способа это сделать: простой и сложный. Начнем с простого: будем считать, что любая коллекция Clojure должна быть записана в базу в виде JSON. Пока что отложим вопрос о других типах, которые тоже описывают коллекциями (например массивы или географические данные).

Расширим протокол ... интерфейсом ... Это базовый интерфейс для коллекций в Clojure, которому удовлетворяют список, вектор, словарь и множество. Наш код должен вернуть PGObject с типом json(b) и JSON-строкой в качестве значения.

...

Чтобы не возиться с методами ... и ..., построим PGObject в отдельной функции ...

...

По аналогии с чтением это может быть мультиметод. Он принимает тип поля и значение Clojure и ищет реализацию для поля. Для json и jsonb он приводит коллекцию к JSON, для точки или линии строит строку вида ... Проверим запись:

...

Видно, что данные сохраняются правильно.

Сложный метод

Выше мы отталкивались от мысли, что любая коллекция должна быть записана в базу в виде JSON. Это не всегда так. Если вы храните в базе точки и многоугольники, логично выразить их векторами, например [1, 2] или {:x 1 :y 2}. Возникает проблема — как сопоставить коллекции и типы в базе.

Одно из решений в кроется в протоколе ... Как и ..., он тоже служит для установки параметра в запрос, но в отличии от первого дает больше контекста. Если точнее, вызов функции ... протокола ... — это поведение протокола ... Такая структура из двух уровней полезна тем, что может решить и простые, и сложные случаи. Ниже — фрагмент кода из библиотеки jdbc:

....

К простым относятся случаи, когда типу Clojure однозначно соответствует тип базы. Мы рассмотрели это поведение на примере дат. Для однозначных типов нужно расширить протокол .... Коллекции относятся к


запись
Проблема null
Точнее об установке параметров

Два этапа (мапа hashtable json)


————————


Обратите внимание, что внутри мы повторно используем форму WHERE. Ее синтаксис одинаков для выборки и индексов, поэтому нет смысла писать свою реализацию.

Если вы работаете с PostgreSQL, обратите внимание на библиотеку ... Это дополнение к Honeysql, которое расширяет мультиметод операторами, специфичными для этой базы данных. Достаточно просто импортировать ее, чтобы новые операторы вступили в силу. Добавьте зависимость в проект:

Одна из интересных возможностей PostgreSQL называется UPSERT. Это комбинация UPDATE и INSERT, вставка и обновление в одном запросе. Предположим, в таблице пользователей поле email уникально, что логично — мы бы не хотели, чтобы было два пользователя с одной почтой. Теперь вам нужно обновить данные о пользователе с почтой ivan@test.com. Если слепо выполнить вставку:

...

, возникнет риск того, что пользователь с такой почтой уже существует, и мы получим ошибку уникальности:

...

Если же выполнить обновление:

...

то в случае когда пользователя нет, мы не добавим его:

...

Такую ситуацию обычно решают в два шага. Сперва мы читаем пользователя из базы, и если он найден, то обновляем, а если нет, то записываем. Это увеличивает код, потому что нужны минимум два запроса и вдобавок условие. Кроме того, новички часто забывают обернуть эти шаги в транзакцию, чтобы параллельные изменения были согласованы. Наконец, когда мы читаем пользователя для изменения, мы должны использовать оператор SELECT ... FOR UPDATE, чтобы заблокировать запись. Про это тоже часто забывают.

База PostgreSQL позволяет выразить перечисленные шаги короче. Если при вставке возник конфликт с уникальным ключом, мы выполняем обновление. Для этого к запросу INSERT ... дописывают часть ON CONFLICT. Конечный запрос выглядит так:

...

Здесь имя ... означает индекс, который был создан из выражения ... при создании таблицы. Уникальные колонки всегда создают индекс по правилу ... Зная имя таблицы и колонки, вы можете сослаться на индекс по шаблону.

Проверим наш запрос в функцию и проверим его несколько раз на одном и том же пользователя. Сперва мы создаем его в базе, а позже обновляем по адресу почты.

...

Библиотека ... расширяет внутренний мультиметод Honeysql ключом ... С ним вы можете описать разрешение конфликта при помощи словаря:

...

Заметим, что стратегий решения конфликта может быть несколько, и обновление записи — лишь одно из них. Возможно, в особых случаях вы предпочтете не делать ничего. Для этого служит ключ ..., когда конфликтные записи просто игнорируются.

Желательно, чтобы функция возвращала не список сущностей, а словарь вида id => entity, например:

{1 {:id 1 :name "Ivan Petrov"}
 2 {:id 2 :name "Ivan Rublev"}}

Эта структура полезна, чтобы позже "дергать" из нее сущности по номеру.
